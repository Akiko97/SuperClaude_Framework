version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: superclaude-postgres
    environment:
      POSTGRES_DB: superclaude
      POSTGRES_USER: superclaude
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U superclaude -d superclaude"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - superclaude-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: superclaude-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dev_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - superclaude-network

  # Tasks Server
  superclaude-tasks:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: superclaude-tasks
    environment:
      NODE_ENV: production
      MCP_SERVER_PORT: 3001
      CONFIG_PATH: /app/shared/config/production.json
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: superclaude
      DATABASE_USER: superclaude
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-dev_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-dev_redis_password}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    volumes:
      - superclaude_logs:/var/log/superclaude
      - superclaude_data:/app/data
    networks:
      - superclaude-network
    command: ["node", "superclaude-tasks/dist/index.js"]

  # Orchestrator Server
  superclaude-orchestrator:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: superclaude-orchestrator
    environment:
      NODE_ENV: production
      MCP_SERVER_PORT: 3002
      CONFIG_PATH: /app/shared/config/production.json
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: superclaude
      DATABASE_USER: superclaude
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-dev_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-dev_redis_password}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret}
      TASKS_SERVER_HOST: superclaude-tasks
      TASKS_SERVER_PORT: 3001
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      superclaude-tasks:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    volumes:
      - superclaude_logs:/var/log/superclaude
      - superclaude_data:/app/data
    networks:
      - superclaude-network
    command: ["node", "superclaude-orchestrator/dist/index.js"]

  # Code Server
  superclaude-code:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: superclaude-code
    environment:
      NODE_ENV: production
      MCP_SERVER_PORT: 3003
      CONFIG_PATH: /app/shared/config/production.json
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: superclaude
      DATABASE_USER: superclaude
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-dev_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-dev_redis_password}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret}
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    volumes:
      - superclaude_logs:/var/log/superclaude
      - superclaude_data:/app/data
    networks:
      - superclaude-network
    command: ["node", "superclaude-code/dist/index.js"]

  # Intelligence Server
  superclaude-intelligence:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: superclaude-intelligence
    environment:
      NODE_ENV: production
      MCP_SERVER_PORT: 3004
      CONFIG_PATH: /app/shared/config/production.json
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: superclaude
      DATABASE_USER: superclaude
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-dev_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-dev_redis_password}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret}
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    volumes:
      - superclaude_logs:/var/log/superclaude
      - superclaude_data:/app/data
    networks:
      - superclaude-network
    command: ["node", "superclaude-intelligence/dist/index.js"]

  # UI Server
  superclaude-ui:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: superclaude-ui
    environment:
      NODE_ENV: production
      MCP_SERVER_PORT: 3005
      CONFIG_PATH: /app/shared/config/production.json
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: superclaude
      DATABASE_USER: superclaude
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-dev_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-dev_redis_password}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret}
    ports:
      - "3005:3005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    volumes:
      - superclaude_logs:/var/log/superclaude
      - superclaude_data:/app/data
    networks:
      - superclaude-network
    command: ["node", "superclaude-ui/dist/index.js"]

  # Quality Server
  superclaude-quality:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: superclaude-quality
    environment:
      NODE_ENV: production
      MCP_SERVER_PORT: 3006
      CONFIG_PATH: /app/shared/config/production.json
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: superclaude
      DATABASE_USER: superclaude
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-dev_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-dev_redis_password}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret}
    ports:
      - "3006:3006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    volumes:
      - superclaude_logs:/var/log/superclaude
      - superclaude_data:/app/data
    networks:
      - superclaude-network
    command: ["node", "superclaude-quality/dist/index.js"]

  # Performance Server
  superclaude-performance:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: superclaude-performance
    environment:
      NODE_ENV: production
      MCP_SERVER_PORT: 3007
      CONFIG_PATH: /app/shared/config/production.json
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: superclaude
      DATABASE_USER: superclaude
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-dev_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-dev_redis_password}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret}
    ports:
      - "3007:3007"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    volumes:
      - superclaude_logs:/var/log/superclaude
      - superclaude_data:/app/data
    networks:
      - superclaude-network
    command: ["node", "superclaude-performance/dist/index.js"]

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: superclaude-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - superclaude_logs:/var/log/nginx
    depends_on:
      - superclaude-tasks
      - superclaude-orchestrator
      - superclaude-code
      - superclaude-intelligence
      - superclaude-ui
      - superclaude-quality
      - superclaude-performance
    restart: unless-stopped
    networks:
      - superclaude-network
    profiles:
      - production

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: superclaude-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - superclaude-network
    profiles:
      - monitoring

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: superclaude-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - superclaude-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  superclaude_logs:
    driver: local
  superclaude_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  superclaude-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16