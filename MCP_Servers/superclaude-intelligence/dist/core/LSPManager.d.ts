import { ServerCapabilities } from 'vscode-languageserver-protocol';
import { EventEmitter } from 'events';
import { LanguageServerInstance, ServerStatus, ServerMetrics, IntelligenceServerConfig, PerformanceMetrics, ConnectionOptimizationResult, DocumentChange, LSPBatchRequest, LSPBatchResult, LSPIntegrationMetrics } from '../types/index.js';
export declare class LSPManager extends EventEmitter {
    private config;
    private servers;
    private configs;
    private healthCheckIntervals;
    private cacheManager;
    private performanceMetrics;
    private connectionPool;
    private incrementalUpdates;
    private batchQueue;
    private tokenReductionEnabled;
    private semanticCache;
    private requestMetrics;
    constructor(config: IntelligenceServerConfig['lsp']);
    private initializeLanguageServerConfigs;
    initializeLanguageServer(language: string): Promise<LanguageServerInstance>;
    sendRequest<T>(language: string, method: string, params: any): Promise<T>;
    sendNotification(language: string, method: string, params: any): Promise<void>;
    getServerCapabilities(language: string): Promise<ServerCapabilities>;
    synchronizeDocument(uri: string, content: string, language: string): Promise<void>;
    shutdownServer(language: string): Promise<void>;
    shutdownAll(): Promise<void>;
    getServerStatus(language: string): ServerStatus | null;
    getServerMetrics(language: string): ServerMetrics | null;
    getAllServerStatuses(): Map<string, ServerStatus>;
    private startServer;
    private getOrInitializeServer;
    private startHealthCheck;
    private performHealthCheck;
    private restartServer;
    private shouldCacheResult;
    private updatePerformanceMetrics;
    private updateServerMetrics;
    getPerformanceMetrics(): Map<string, PerformanceMetrics>;
    private getPooledConnection;
    private getOrCreatePooledConnection;
    private createConnection;
    private isConnectionHealthy;
    private findLRUConnection;
    private resetConnection;
    private initializeConnection;
    sendRequestEnhanced<T>(language: string, method: string, params: any): Promise<T>;
    batchRequests(requests: LSPBatchRequest[]): Promise<LSPBatchResult>;
    handleIncrementalChange(uri: string, changes: DocumentChange[]): Promise<void>;
    private calculateTokenReduction;
    optimizeConnectionPool(): Promise<ConnectionOptimizationResult>;
    private shutdownConnection;
    private getTotalConnections;
    private startBatchProcessor;
    private processBatchQueues;
    private startIncrementalUpdateProcessor;
    private processIncrementalUpdates;
    private processIncrementalUpdate;
    private calculateUpdatePriority;
    private hasStructuralChanges;
    private isFrequentlyAccessed;
    private generateSemanticCacheKey;
    private getFromSemanticCache;
    private storeInSemanticCache;
    private evictOldestCacheEntries;
    private shouldCacheSemanticResult;
    private invalidateSemanticCache;
    private getLanguageFromUri;
    private estimateTokenCount;
    private countSymbols;
    private extractSymbolCount;
    private extractDependencies;
    private updateConnectionMetrics;
    private updateRequestMetrics;
    private recordCacheHit;
    getLSPIntegrationMetrics(): LSPIntegrationMetrics;
}
//# sourceMappingURL=LSPManager.d.ts.map