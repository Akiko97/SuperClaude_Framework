name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  
jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: MCP_Servers/package-lock.json
        
    - name: Install dependencies
      working-directory: MCP_Servers
      run: npm ci
      
    - name: Run type checking
      working-directory: MCP_Servers
      run: npm run type-check
      
    - name: Run linting
      working-directory: MCP_Servers
      run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [
          '@superclaude/shared',
          '@superclaude/bridge-hooks',
          '@superclaude/tasks-server',
          '@superclaude/orchestrator-server',
          '@superclaude/code-server',
          '@superclaude/quality-server',
          '@superclaude/performance-server'
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: MCP_Servers/package-lock.json
        
    - name: Install dependencies
      working-directory: MCP_Servers
      run: npm ci
      
    - name: Run tests with coverage
      working-directory: MCP_Servers
      run: npm run test:coverage --workspace=${{ matrix.workspace }}
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: MCP_Servers
        flags: ${{ matrix.workspace }}
        name: ${{ matrix.workspace }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: MCP_Servers/package-lock.json
        
    - name: Install dependencies
      working-directory: MCP_Servers
      run: npm ci
      
    - name: Build all packages
      working-directory: MCP_Servers
      run: npm run build
      
    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          MCP_Servers/*/dist/
          !MCP_Servers/node_modules/
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: MCP_Servers/package-lock.json
        
    - name: Install dependencies
      working-directory: MCP_Servers
      run: npm ci
      
    - name: Run npm audit
      working-directory: MCP_Servers
      run: npm audit --audit-level=moderate
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: typescript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        server: [tasks, orchestrator, code, quality, performance]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/superclaude-${{ matrix.server }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: MCP_Servers
        file: MCP_Servers/superclaude-${{ matrix.server }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment"
        # Add deployment logic here
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment"
        # Add deployment logic here